{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\PythoFullStack\\\\full_react\\\\src\\\\react1\\\\pratical\\\\customhook.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction useCaseToggle(initialtext = '') {\n  _s();\n  const [text, setText] = useState(initialtext);\n  const togglecase = () => {\n    const toggled = text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n    setText(toggled);\n  };\n  return {\n    text,\n    setText,\n    togglecase\n  };\n}\n_s(useCaseToggle, \"k45IFsVIYaXI2W3/pNSGZW4PH0Q=\");\nfunction Upper() {\n  _s2();\n  const {\n    text,\n    setText,\n    togglecase\n  } = useCaseToggle();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setText(e.target.value),\n      placeholder: \"write anythig\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglecase,\n      children: \"change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s2(Upper, \"f7V3Qs9KApt7em2l9CbTNoZAUd0=\", false, function () {\n  return [useCaseToggle];\n});\n_c = Upper;\nexport default Upper;\nvar _c;\n$RefreshReg$(_c, \"Upper\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","useCaseToggle","initialtext","_s","text","setText","togglecase","toggled","split","map","char","toUpperCase","toLowerCase","join","Upper","_s2","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/project/PythoFullStack/full_react/src/react1/pratical/customhook.jsx"],"sourcesContent":["import React,{useState} from \"react\";\r\n\r\n\r\nfunction  useCaseToggle(initialtext=''){\r\n    const [text,setText] = useState(initialtext)\r\n\r\n    const togglecase = () =>{\r\n        const toggled = text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase():char.toUpperCase()).join('')\r\n        setText(toggled)\r\n\r\n    }\r\n   return {text,setText,togglecase }\r\n}\r\n\r\nfunction Upper(){\r\n\r\n    const {text,setText,togglecase} = useCaseToggle()\r\n\r\n    return(\r\n        <>\r\n        <h1>{text}</h1>\r\n\r\n        <input onChange={(e) => setText(e.target.value)} placeholder=\"write anythig\" />\r\n        <button onClick={togglecase}>change</button>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Upper\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGrC,SAAUC,aAAaA,CAACC,WAAW,GAAC,EAAE,EAAC;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGT,QAAQ,CAACM,WAAW,CAAC;EAE5C,MAAMI,UAAU,GAAGA,CAAA,KAAK;IACpB,MAAMC,OAAO,GAAGH,IAAI,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,KAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,GAACF,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;IACxHR,OAAO,CAACE,OAAO,CAAC;EAEpB,CAAC;EACF,OAAO;IAACH,IAAI;IAACC,OAAO;IAACC;EAAW,CAAC;AACpC;AAACH,EAAA,CATSF,aAAa;AAWvB,SAASa,KAAKA,CAAA,EAAE;EAAAC,GAAA;EAEZ,MAAM;IAACX,IAAI;IAACC,OAAO;IAACC;EAAU,CAAC,GAAGL,aAAa,CAAC,CAAC;EAEjD,oBACIH,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACAlB,OAAA;MAAAkB,QAAA,EAAKZ;IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEftB,OAAA;MAAOuB,QAAQ,EAAGC,CAAC,IAAKjB,OAAO,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACC,WAAW,EAAC;IAAe;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/EtB,OAAA;MAAQ4B,OAAO,EAAEpB,UAAW;MAAAU,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAG1C,CAAC;AAEX;AAACL,GAAA,CAdQD,KAAK;EAAA,QAEwBb,aAAa;AAAA;AAAA0B,EAAA,GAF1Cb,KAAK;AAgBd,eAAeA,KAAK;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}